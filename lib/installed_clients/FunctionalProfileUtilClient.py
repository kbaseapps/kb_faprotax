# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except ImportError:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class FunctionalProfileUtil(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login',
            service_ver='release',
            async_job_check_time_ms=100, async_job_check_time_scale_percent=150, 
            async_job_check_max_time_ms=300000):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = service_ver
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc,
            async_job_check_time_ms=async_job_check_time_ms,
            async_job_check_time_scale_percent=async_job_check_time_scale_percent,
            async_job_check_max_time_ms=async_job_check_max_time_ms)

    def import_func_profile(self, params, context=None):
        """
        :param params: instance of type "ImportFuncProfileParams"
           (func_profile_obj_name - result FunctionalProfile object name
           original_matrix_ref - original matrix object associated with this
           functional profile object original matrix must have sample_set_ref
           for community_profile and amplicon_set_ref for organism_profile
           profile_file_path - either a local file path or staging file path
           profile_type - type of profile. e.g. amplicon, MG profile_category
           - category of profile. one of community or organism optional
           arguments: staging_file - profile_file_path provided in
           ProfileTable is a staging file path. default: False build_report -
           build report for narrative. default: False data_epistemology - how
           was data acquired. one of: measured, asserted, predicted
           epistemology_method - method/program to be used to acquired data.
           e.g. FAPROTAX, PICRUSt2 description - description for the profile)
           -> structure: parameter "workspace_id" of Long, parameter
           "func_profile_obj_name" of String, parameter "original_matrix_ref"
           of type "WSRef" (Ref to a WS object @id ws), parameter
           "profile_file_path" of String, parameter "profile_type" of String,
           parameter "profile_category" of String, parameter "staging_file"
           of type "bool" (A boolean - 0 for false, 1 for true. @range (0,
           1)), parameter "build_report" of type "bool" (A boolean - 0 for
           false, 1 for true. @range (0, 1)), parameter "data_epistemology"
           of String, parameter "epistemology_method" of String, parameter
           "description" of String
        :returns: instance of type "ImportFuncProfileResults" -> structure:
           parameter "func_profile_ref" of type "WSRef" (Ref to a WS object
           @id ws), parameter "report_name" of String, parameter "report_ref"
           of type "WSRef" (Ref to a WS object @id ws)
        """
        return self._client.run_job('FunctionalProfileUtil.import_func_profile',
                                    [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.run_job('FunctionalProfileUtil.status',
                                    [], self._service_ver, context)
